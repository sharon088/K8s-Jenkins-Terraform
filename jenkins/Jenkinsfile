pipeline {
    agent any

    environment {
        DOCKER_REGISTRY = "docker.io/sharon088"
        DOCKER_IMAGE = "tf-k8s-jenkins"
        dockerHubCredentials = 'dockerhub'
    }

    stages {
        stage('Build the Docker image') {
            steps {
                script {
                    // Using Docker layer caching
                    sh "docker build --cache-from=${DOCKER_REGISTRY}/${DOCKER_IMAGE}:latest -t ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${env.BUILD_ID} ."
                }
            }
        }

        stage('Push Docker image') {
            steps {
                script {
                    docker.withRegistry('', dockerHubCredentials) {
                        sh "docker push ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${env.BUILD_ID}"
                        sh "docker push ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:latest"
                    }
                }
            }
        }

        stage('Update Kubernetes Deployment') {
            steps {
                script {
                    def deploymentFile = readFile('manifests/deployment.yml')
                    def updatedDeployment = deploymentFile.replaceAll("image: .*", "image: ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${env.BUILD_ID}")
                    writeFile file: 'manifests/deployment.yml', text: updatedDeployment
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    sh 'kubectl apply -f manifests/deployment.yml'
                    sh 'kubectl apply -f manifests/service.yml'
                    sh 'kubectl apply -f manifests/ingress.yml'
                }
            }
        }
    }
}
